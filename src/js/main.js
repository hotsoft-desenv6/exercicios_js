// Generated by CoffeeScript 1.9.3
(function() {
  var Amostra, Base, EXAMES, Lote, getId, i, j, k, l, m, resetStore, results, results1, results2, results3, results4,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  resetStore = function() {
    return localStorage.clear();
  };

  getId = function(cod) {
    var id;
    id = localStorage.getItem(cod);
    if (id === null) {
      id = 1;
      localStorage.setItem(cod, id);
    }
    localStorage.setItem(cod, parseInt(id) + 1);
    return id;
  };

  EXAMES = [
    {
      nome: 'Glicose',
      tipo: 'Numerico',
      result: (function() {
        results = [];
        for (i = 100; i <= 300; i++){ results.push(i); }
        return results;
      }).apply(this),
      ref: (function() {
        results1 = [];
        for (j = 150; j <= 250; j++){ results1.push(j); }
        return results1;
      }).apply(this)
    }, {
      nome: 'HIV',
      tipo: 'Boolean',
      result: [true, false],
      ref: false
    }, {
      nome: 'Creatinina',
      tipo: 'Numerico',
      result: (function() {
        results2 = [];
        for (k = 20; k <= 50; k++){ results2.push(k); }
        return results2;
      }).apply(this),
      ref: [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    }, {
      nome: 'Triglicerideos',
      tipo: 'Numerico',
      result: (function() {
        results3 = [];
        for (l = 200; l <= 500; l++){ results3.push(l); }
        return results3;
      }).apply(this),
      ref: (function() {
        results4 = [];
        for (m = 300; m <= 400; m++){ results4.push(m); }
        return results4;
      }).apply(this)
    }
  ];

  Base = (function() {
    function Base(f, ms) {
      this.f = f;
      this.ms = ms;
      this.exec_f();
    }

    Base.prototype.exec_f = function() {
      return setTimeout((function(_this) {
        return function() {
          return _this.p_func();
        };
      })(this), this.ms);
    };

    Base.prototype.p_func = function() {
      return this.f();
    };

    return Base;

  })();

  Amostra = (function() {
    function Amostra() {
      this.dataCriacao = Date();
      this.numamostra = getId('numAmostra');
      this.exame = EXAMES[Math.floor(Math.random() * 4)];
      console.log(this.exame.nome);
    }

    Amostra.prototype.set_result = function() {
      var ref;
      this.result = this.exame.result[Math.floor(Math.random() * (this.exame.result.length - 1))];
      return this.alterado = (ref = this.result, indexOf.call(this.exame.ref, ref) < 0);
    };

    return Amostra;

  })();

  Lote = (function(superClass) {
    var amostras;

    extend(Lote, superClass);

    amostras = [];

    function Lote() {
      Lote.__super__.constructor.apply(this, arguments);
      this.numlote = getId('numlote');
      this.status = 'CRIADO';
    }

    Lote.prototype.addAmostra = function(am) {
      return amostras.push(am);
    };

    return Lote;

  })(Base);

  angular.module('LoteApp', []).controller('LoteAbertoCtrl', function() {
    var add_amostra, add_lote, lotes;
    lotes = this;
    lotes.loteAberto = '';
    lotes.loteEmProcesso = [];
    add_lote = function() {
      return new Lote(function() {
        return this.status = 'EMPROCESSO';
      }, 5000);
    };
    add_amostra = function() {
      return new Amostra;
    };
    lotes.add_lote_amostra = function() {
      if (lotes.loteAberto.status === 'EMPROCESSO') {
        lotes.loteEmProcesso.push(lotes.loteAberto);
        lotes.loteAberto = add_lote();
      }
      if (lotes.loteAberto === '') {
        lotes.loteAberto = add_lote();
      }
      lotes.loteAberto.addAmostra(add_amostra());
      return console.log(lotes.loteAberto.numlote);
    };
    return lotes.inicia = function() {
      console.log('inicia');
      return setInterval(lotes.add_lote_amostra, 1000);
    };
  });


  /*
  
  $(document).ready ->
   *  $('#btnTeste').on('click', $.proxy(cal.fire, this, 'abacate'))
    $('#btnZerar').click(resetStore)
    $('#btnAdAmotra').click(inicia)
   */

}).call(this);

//# sourceMappingURL=main.js.map
