// Generated by CoffeeScript 1.9.3
(function() {
  var Amostra, EXAMES, Lote, getId, j, k, m, n, o, resetStore, results, results1, results2, results3, results4,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  resetStore = function() {
    return localStorage.clear();
  };

  getId = function(cod) {
    var id;
    id = localStorage.getItem(cod);
    if (id === null) {
      id = 1;
      localStorage.setItem(cod, id);
    }
    localStorage.setItem(cod, parseInt(id) + 1);
    return id;
  };

  EXAMES = [
    {
      nome: 'Glicose',
      tipo: 'Numerico',
      result: (function() {
        results = [];
        for (j = 100; j <= 300; j++){ results.push(j); }
        return results;
      }).apply(this),
      ref: (function() {
        results1 = [];
        for (k = 150; k <= 250; k++){ results1.push(k); }
        return results1;
      }).apply(this)
    }, {
      nome: 'HIV',
      tipo: 'Boolean',
      result: [true, false],
      ref: false
    }, {
      nome: 'Creatinina',
      tipo: 'Numerico',
      result: (function() {
        results2 = [];
        for (m = 20; m <= 50; m++){ results2.push(m); }
        return results2;
      }).apply(this),
      ref: [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    }, {
      nome: 'Triglicerideos',
      tipo: 'Numerico',
      result: (function() {
        results3 = [];
        for (n = 200; n <= 500; n++){ results3.push(n); }
        return results3;
      }).apply(this),
      ref: (function() {
        results4 = [];
        for (o = 300; o <= 400; o++){ results4.push(o); }
        return results4;
      }).apply(this)
    }
  ];

  Amostra = (function() {
    function Amostra() {
      this.dataHoraCriacao = Date.now();
      this.numamostra = getId('numAmostra');
      this.exame = EXAMES[Math.floor(Math.random() * 4)];
    }

    Amostra.prototype.set_result = function() {
      var ref;
      this.result = this.exame.result[Math.floor(Math.random() * (this.exame.result.length - 1))];
      this.alterado = (ref = this.result, indexOf.call(this.exame.ref, ref) < 0);
      return this.dataHoraResultado = Date.now();
    };

    return Amostra;

  })();

  Lote = (function() {
    function Lote(func) {
      this.func = func;
      this.timeout_status();
      this.amostras = [];
      this.numlote = getId('numlote');
      this.status = 'CRIADO';
    }

    Lote.prototype.addAmostra = function(am) {
      return this.amostras.push(am);
    };

    Lote.prototype.timeout_status = function() {
      return setTimeout((function(_this) {
        return function() {
          return _this.set_status();
        };
      })(this), 18000);
    };

    Lote.prototype.set_status = function() {
      if (this.status === 'CRIADO') {
        this.status = 'EMPROCESSO';
      }
      return this.processa_amostra();
    };

    Lote.prototype.processa_amostra = function(i) {
      if (i >= this.amostras.length) {
        return this.timeout_amostra(i);
      } else {
        this.status = 'PRONTO';
        return this.processa_lote();
      }
    };

    Lote.prototype.processa_lote = function() {
      return this.func;
    };

    Lote.prototype.timeout_amostra = function() {
      return setTimeout(function() {
        this.amostras[i].set_result();
        return this.processa_amostra(i + 1);
      }, Math.floor(Math.random() * 7000));
    };

    return Lote;

  })();

  angular.module('LoteApp', []).controller('LoteCtrl', function() {
    var lotes;
    lotes = this;
    lotes.loteAberto = '';
    lotes.lotesEmProcesso = [];
    lotes.lotesProntos = [];
    lotes.processa_lote = function() {
      var l, len, p, ref, results5;
      ref = lotes.lotesEmProcesso;
      results5 = [];
      for (p = 0, len = ref.length; p < len; p++) {
        l = ref[p];
        console.log('lote em processo: ' + l.numlote);
        lotes.lotesProntos.push(l);
        results5.push(lotes.lotesEmProcesso.pop(l));
      }
      return results5;
    };
    lotes.add_lote = function() {
      return new Lote(lotes.processa_lote);
    };
    lotes.add_amostra = function() {
      return new Amostra;
    };
    lotes.add_lote_amostra = function() {
      if (lotes.loteAberto.status === 'EMPROCESSO') {
        lotes.lotesEmProcesso.push(lotes.loteAberto);
        lotes.loteAberto = lotes.add_lote();
      }
      if (lotes.loteAberto === '') {
        lotes.loteAberto = lotes.add_lote();
      }
      lotes.loteAberto.addAmostra(lotes.add_amostra());
      setTimeout(lotes.add_lote_amostra, Math.floor(Math.random() * 7000));
      return console.log(lotes.loteAberto.numlote);
    };
    return lotes.add_lote_amostra();
  });


  /*
  
  $(document).ready ->
   *  $('#btnTeste').on('click', $.proxy(cal.fire, this, 'abacate'))
    $('#btnZerar').click(resetStore)
    $('#btnAdAmotra').click(inicia)
   */

}).call(this);

//# sourceMappingURL=main.js.map
