// Generated by CoffeeScript 1.9.3
(function() {
  var Amostra, CRIADO, EM_PROCESSO, EXAMES, Lote, PRONTO, add_amostra, add_lote, add_lote_amostra, getId, inicia, j, k, log, lotes, m, n, o, parar, resetStore, results, results1, results2, results3, results4,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CRIADO = "CRIADO";

  EM_PROCESSO = "EMPROCESSO";

  PRONTO = "PRONTO";

  log = function(t) {
    return console.log(t);
  };

  resetStore = function() {
    return localStorage.clear();
  };

  getId = function(cod) {
    var id;
    id = localStorage.getItem(cod);
    if (id === null) {
      id = 1;
      localStorage.setItem(cod, id);
    }
    localStorage.setItem(cod, parseInt(id) + 1);
    return id;
  };

  EXAMES = [
    {
      nome: 'Glicose',
      tipo: 'Numerico',
      result: (function() {
        results = [];
        for (j = 100; j <= 300; j++){ results.push(j); }
        return results;
      }).apply(this),
      ref: (function() {
        results1 = [];
        for (k = 150; k <= 250; k++){ results1.push(k); }
        return results1;
      }).apply(this)
    }, {
      nome: 'HIV',
      tipo: 'Boolean',
      result: [true, false],
      ref: false
    }, {
      nome: 'Creatinina',
      tipo: 'Numerico',
      result: (function() {
        results2 = [];
        for (m = 20; m <= 50; m++){ results2.push(m); }
        return results2;
      }).apply(this),
      ref: [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    }, {
      nome: 'Triglicerideos',
      tipo: 'Numerico',
      result: (function() {
        results3 = [];
        for (n = 200; n <= 500; n++){ results3.push(n); }
        return results3;
      }).apply(this),
      ref: (function() {
        results4 = [];
        for (o = 300; o <= 400; o++){ results4.push(o); }
        return results4;
      }).apply(this)
    }
  ];

  Amostra = (function() {
    function Amostra() {
      this.dataHoraCriacao = Date.now();
      this.numamostra = getId('numAmostra');
      this.exame = EXAMES[Math.floor(Math.random() * 4)];
    }

    Amostra.prototype.set_result = function() {
      var ref;
      this.resultado = this.exame.result[Math.floor(Math.random() * (this.exame.result.length - 1))];
      this.alterado = (ref = this.resultado, indexOf.call(this.exame.ref, ref) < 0);
      return this.dataHoraResultado = Date.now();
    };

    return Amostra;

  })();

  Lote = (function() {
    function Lote() {
      this.amostras = [];
      this.numlote = getId('numlote');
      this.status = CRIADO;
    }

    Lote.prototype.setStatus = function(s) {
      return this.status = s;
    };

    Lote.prototype.addAmostra = function(am) {
      return this.amostras.push(am);
    };

    return Lote;

  })();

  lotes = [];

  parar = true;

  add_lote_amostra = function() {
    if (lotes[lotes.length - 1]) {
      switch (lotes[lotes.length - 1].status) {
        case CRIADO:
          add_amostra();
          break;
        case EM_PROCESSO:
          add_lote();
      }
    } else {
      add_lote();
    }
    if (!parar) {
      return setTimeout(add_lote_amostra, Math.floor(Math.random() * 7000));
    }
  };

  add_lote = function() {
    var i, l, processa_amostra, processa_lote;
    l = lotes[lotes.push(new Lote) - 1];
    log('novo lote: ' + l.numlote);
    i = 0;
    processa_amostra = function() {
      if (i < l.amostras.length) {
        l.amostras[i++].set_result();
        setTimeout(processa_amostra, Math.floor(Math.random() * 3000));
      } else {
        l.setStatus(PRONTO);
      }
      return log('lote: ' + l.numlote + ' - status: ' + l.status + ' - amostra: ' + l.amostras[i - 1].numamostra + ' - exame: ' + l.amostras[i - 1].exame.nome + ' - resultado: ' + l.amostras[i - 1].resultado);
    };
    processa_lote = function() {
      l.setStatus(EM_PROCESSO);
      return processa_amostra();
    };
    return setTimeout(processa_lote, 15000);
  };

  add_amostra = function() {
    var lamostra, llote;
    lotes[lotes.length - 1].addAmostra(new Amostra());
    llote = lotes[lotes.length - 1];
    lamostra = llote.amostras[llote.amostras.length - 1];
    return log('numlote: ' + llote.numlote + ' - numamostra: ' + lamostra.numamostra + ' - exame: ' + lamostra.exame.nome);
  };

  inicia = function() {
    log('inicia');
    if (parar) {
      parar = false;
      return add_lote_amostra();
    } else {
      return parar = true;
    }
  };

  $(document).ready(function() {
    $('#btnAdAmotra').click(inicia);
    return $('#teste').click(resetStore);
  });

}).call(this);

//# sourceMappingURL=main.js.map
